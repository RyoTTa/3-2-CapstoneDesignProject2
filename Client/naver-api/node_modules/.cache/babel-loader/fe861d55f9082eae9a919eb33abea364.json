{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sorio\\\\Desktop\\\\click\\\\naver-api\\\\src\\\\App.js\";\nimport { RenderAfterNavermapsLoaded, NaverMap } from \"react-naver-maps\";\nimport React from \"react\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const navermaps = window.naver.maps;\n    this.state = {\n      // defaults\n      zoomControl: true,\n      //줌 컨트롤의 표시 여부\n      zoomControlOptions: {\n        //줌 컨트롤의 옵션\n        position: navermaps.Position.TOP_RIGHT\n      },\n      // min max zoom\n      minZoom: 1,\n      maxZoom: 14,\n      // interaction\n      draggable: true,\n      pinchZoom: true,\n      scrollWheel: true,\n      keyboardShortcuts: true,\n      disableDoubleTapZoom: false,\n      disableDoubleClickZoom: false,\n      disableTwoFingerTapZoom: false,\n      // kinetic\n      disableKineticPan: true,\n      // tile transition\n      tileTransition: true,\n      // controls\n      scaleControl: true,\n      logoControl: true,\n      mapDataControl: true,\n      zoomControl: true,\n      mapTypeControl: true\n    };\n    this.toggleInteraction = this.toggleInteraction.bind(this);\n    this.toggleKinetic = this.toggleKinetic.bind(this);\n    this.toggleTileTransition = this.toggleTileTransition.bind(this);\n    this.toggleControl = this.toggleControl.bind(this);\n    this.toggleMinMaxZoom = this.toggleMinMaxZoom.bind(this);\n  }\n\n  toggleInteraction() {\n    if (this.state.draggable) {\n      this.setState({\n        draggable: false,\n        pinchZoom: false,\n        scrollWheel: false,\n        keyboardShortcuts: false,\n        disableDoubleTapZoom: true,\n        disableDoubleClickZoom: true,\n        disableTwoFingerTapZoom: true\n      });\n    } else {\n      this.setState({\n        draggable: true,\n        pinchZoom: true,\n        scrollWheel: true,\n        keyboardShortcuts: true,\n        disableDoubleTapZoom: false,\n        disableDoubleClickZoom: false,\n        disableTwoFingerTapZoom: false\n      });\n    }\n  }\n\n  toggleKinetic() {\n    this.setState({\n      disableKineticPan: !this.state.disableKineticPan\n    });\n  }\n\n  toggleTileTransition() {\n    this.setState({\n      tileTransition: !this.state.tileTransition\n    });\n  }\n\n  toggleControl() {\n    if (this.state.scaleControl) {\n      this.setState({\n        scaleControl: false,\n        logoControl: false,\n        mapDataControl: false,\n        zoomControl: false,\n        mapTypeControl: false\n      });\n    } else {\n      this.setState({\n        scaleControl: true,\n        logoControl: true,\n        mapDataControl: true,\n        zoomControl: true,\n        mapTypeControl: true\n      });\n    }\n  }\n\n  toggleMinMaxZoom() {\n    if (this.state.minZoom === 10) {\n      this.setState({\n        minZoom: 1,\n        maxZoom: 14\n      });\n    } else {\n      this.setState({\n        minZoom: 10,\n        maxZoom: 12\n      });\n    }\n  }\n\n  render() {\n    const navermaps = window.naver.maps;\n    return /*#__PURE__*/React.createElement(NaverMap, Object.assign({\n      id: \"maps-examples-map-options\",\n      style: {\n        width: \"100%\",\n        height: \"600px\"\n      },\n      defaultCenter: new navermaps.LatLng(37.3595704, 127.105399) //지도의 초기 중심 좌표\n      ,\n      defaultZoom: 8 //지도의 초기 줌 레벨\n\n    }, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Buttons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlBtn, {\n      controlOn: this.state.draggable,\n      onClick: this.toggleInteraction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, \"\\uC9C0\\uB3C4 \\uC778\\uD130\\uB809\\uC158\"), /*#__PURE__*/React.createElement(ControlBtn, {\n      controlOn: !this.state.disableKineticPan,\n      onClick: this.toggleKinetic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \"\\uAD00\\uC131 \\uB4DC\\uB798\\uAE45\"), /*#__PURE__*/React.createElement(ControlBtn, {\n      controlOn: this.state.tileTransition,\n      onClick: this.toggleTileTransition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, \"\\uD0C0\\uC77C fadeIn \\uD6A8\\uACFC\"), /*#__PURE__*/React.createElement(ControlBtn, {\n      controlOn: this.state.scaleControl,\n      onClick: this.toggleControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, \"\\uBAA8\\uB4E0 \\uC9C0\\uB3C4 \\uCEE8\\uD2B8\\uB864\"), /*#__PURE__*/React.createElement(ControlBtn, {\n      onClick: this.toggleMinMaxZoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, \"최소/최대 줌 레벨\" + (this.state.minZoom === 10 ? \": 10 ~ 12\" : \": 1 ~ 14\"))));\n  }\n\n} // render\n\n\n/*#__PURE__*/\nReact.createElement(RenderAfterNavermapsLoaded, {\n  clientId: YOUR_CLIENT_ID,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 3\n  }\n}));\nexport default App;","map":{"version":3,"sources":["C:/Users/sorio/Desktop/click/naver-api/src/App.js"],"names":["RenderAfterNavermapsLoaded","NaverMap","React","App","Component","constructor","props","navermaps","window","naver","maps","state","zoomControl","zoomControlOptions","position","Position","TOP_RIGHT","minZoom","maxZoom","draggable","pinchZoom","scrollWheel","keyboardShortcuts","disableDoubleTapZoom","disableDoubleClickZoom","disableTwoFingerTapZoom","disableKineticPan","tileTransition","scaleControl","logoControl","mapDataControl","mapTypeControl","toggleInteraction","bind","toggleKinetic","toggleTileTransition","toggleControl","toggleMinMaxZoom","setState","render","width","height","LatLng","YOUR_CLIENT_ID"],"mappings":"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","sourcesContent":["import { RenderAfterNavermapsLoaded, NaverMap } from \"react-naver-maps\";\nimport React from \"react\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const navermaps = window.naver.maps;\n\n    this.state = {\n      // defaults\n      zoomControl: true, //줌 컨트롤의 표시 여부\n      zoomControlOptions: {\n        //줌 컨트롤의 옵션\n        position: navermaps.Position.TOP_RIGHT,\n      },\n\n      // min max zoom\n      minZoom: 1,\n      maxZoom: 14,\n\n      // interaction\n      draggable: true,\n      pinchZoom: true,\n      scrollWheel: true,\n      keyboardShortcuts: true,\n      disableDoubleTapZoom: false,\n      disableDoubleClickZoom: false,\n      disableTwoFingerTapZoom: false,\n\n      // kinetic\n      disableKineticPan: true,\n\n      // tile transition\n      tileTransition: true,\n\n      // controls\n      scaleControl: true,\n      logoControl: true,\n      mapDataControl: true,\n      zoomControl: true,\n      mapTypeControl: true,\n    };\n\n    this.toggleInteraction = this.toggleInteraction.bind(this);\n    this.toggleKinetic = this.toggleKinetic.bind(this);\n    this.toggleTileTransition = this.toggleTileTransition.bind(this);\n    this.toggleControl = this.toggleControl.bind(this);\n    this.toggleMinMaxZoom = this.toggleMinMaxZoom.bind(this);\n  }\n\n  toggleInteraction() {\n    if (this.state.draggable) {\n      this.setState({\n        draggable: false,\n        pinchZoom: false,\n        scrollWheel: false,\n        keyboardShortcuts: false,\n        disableDoubleTapZoom: true,\n        disableDoubleClickZoom: true,\n        disableTwoFingerTapZoom: true,\n      });\n    } else {\n      this.setState({\n        draggable: true,\n        pinchZoom: true,\n        scrollWheel: true,\n        keyboardShortcuts: true,\n        disableDoubleTapZoom: false,\n        disableDoubleClickZoom: false,\n        disableTwoFingerTapZoom: false,\n      });\n    }\n  }\n\n  toggleKinetic() {\n    this.setState({\n      disableKineticPan: !this.state.disableKineticPan,\n    });\n  }\n\n  toggleTileTransition() {\n    this.setState({\n      tileTransition: !this.state.tileTransition,\n    });\n  }\n\n  toggleControl() {\n    if (this.state.scaleControl) {\n      this.setState({\n        scaleControl: false,\n        logoControl: false,\n        mapDataControl: false,\n        zoomControl: false,\n        mapTypeControl: false,\n      });\n    } else {\n      this.setState({\n        scaleControl: true,\n        logoControl: true,\n        mapDataControl: true,\n        zoomControl: true,\n        mapTypeControl: true,\n      });\n    }\n  }\n\n  toggleMinMaxZoom() {\n    if (this.state.minZoom === 10) {\n      this.setState({\n        minZoom: 1,\n        maxZoom: 14,\n      });\n    } else {\n      this.setState({\n        minZoom: 10,\n        maxZoom: 12,\n      });\n    }\n  }\n\n  render() {\n    const navermaps = window.naver.maps;\n\n    return (\n      <NaverMap\n        id=\"maps-examples-map-options\"\n        style={{\n          width: \"100%\",\n          height: \"600px\",\n        }}\n        defaultCenter={new navermaps.LatLng(37.3595704, 127.105399)} //지도의 초기 중심 좌표\n        defaultZoom={8} //지도의 초기 줌 레벨\n        {...this.state}\n      >\n        <Buttons>\n          <ControlBtn\n            controlOn={this.state.draggable}\n            onClick={this.toggleInteraction}\n          >\n            지도 인터렉션\n          </ControlBtn>\n          <ControlBtn\n            controlOn={!this.state.disableKineticPan}\n            onClick={this.toggleKinetic}\n          >\n            관성 드래깅\n          </ControlBtn>\n          <ControlBtn\n            controlOn={this.state.tileTransition}\n            onClick={this.toggleTileTransition}\n          >\n            타일 fadeIn 효과\n          </ControlBtn>\n          <ControlBtn\n            controlOn={this.state.scaleControl}\n            onClick={this.toggleControl}\n          >\n            모든 지도 컨트롤\n          </ControlBtn>\n          <ControlBtn onClick={this.toggleMinMaxZoom}>\n            {\"최소/최대 줌 레벨\" +\n              (this.state.minZoom === 10 ? \": 10 ~ 12\" : \": 1 ~ 14\")}\n          </ControlBtn>\n        </Buttons>\n      </NaverMap>\n    );\n  }\n}\n\n// render\n<RenderAfterNavermapsLoaded clientId={YOUR_CLIENT_ID}>\n  <App />\n</RenderAfterNavermapsLoaded>;\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}